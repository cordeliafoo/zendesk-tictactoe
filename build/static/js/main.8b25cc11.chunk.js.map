{"version":3,"sources":["components/userInput.js","components/square.js","utils/functions.js","components/board.js","components/reset.js","App.js","index.js"],"names":["UserInput","props","handleChange","event","input","target","setState","name","value","state","player1","player2","formErrors","boardSize","e","player","this","localStorage","setItem","preventDefault","getItem","className","onSubmit","handleNameFormSubmit","onChange","placeholder","type","handleBoardSizeFormSubmit","to","React","Component","Square","onClick","findWinner","playerChosen","grid","gridLength","row","count","col","console","log","checkRows","checkCols","maxLength","rowStart","colStart","checkDiagLR","winCount","checkDiagRL","Board","defaultValues","fillBoardDefaultValues","xIsNext","Array","parseInt","fill","map","gameOverWithWinner","gameOverWithDraw","winner","showPlayAgainButton","rowIndex","colIndex","slice","utils","style","width","height","display","gridTemplate","x","o","displayNextPlayer","rowItem","colItem","handleSquareClick","handlePlayAgainButton","Reset","handleOnReset","clear","window","location","process","App","basename","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b25cc11.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"../styles/userInput.css\";\n\nclass UserInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      player1: \"\",\n      player2: \"\",\n      formErrors: {},\n      boardSize: 3\n    };\n  }\n\n  handleNameFormSubmit(e, player) {\n    const { player1, player2 } = this.state;\n    if (player1 !== \"\" || player2 !== \"\") {\n      if (player === \"player1\") {\n        localStorage.setItem(\"x\", player1);\n      } else {\n        localStorage.setItem(\"o\", player2);\n      }\n    } else {\n      e.preventDefault();\n      this.setState({ formErrors: { name: \"You can't be nameless!\" } });\n    }\n  }\n\n  handleBoardSizeFormSubmit(e) {\n    const { boardSize } = this.state;\n    if (boardSize > 2) {\n      localStorage.setItem(\"boardSize\", boardSize);\n    } else {\n      e.preventDefault();\n      this.setState({\n        formErrors: {\n          ...this.state.formErrors,\n          boardSize: \"Board size needs to be at least 3\"\n        }\n      });\n    }\n  }\n\n  handleChange = event => {\n    const input = event.target;\n    this.setState({ [input.name]: input.value });\n  };\n\n  render() {\n    const { formErrors } = this.state;\n\n    let player1 = localStorage.getItem(\"x\");\n    let player2 = localStorage.getItem(\"o\");\n    let boardSize = localStorage.getItem(\"boardSize\");\n\n    return (\n      <div className=\"formsContainer\">\n        <div className=\"nameFormsContainer\">\n          {player1 === null ? (\n            <form onSubmit={e => this.handleNameFormSubmit(e, \"player1\")}>\n              <label>\n                Player 1:{\" \"}\n                <input\n                  name=\"player1\"\n                  value={this.state.player1}\n                  onChange={this.handleChange}\n                  placeholder=\"enter your name\"\n                />\n              </label>\n              <button type=\"submit\">Go</button>\n              {formErrors && <p className=\"formError\">{formErrors.name}</p>}\n            </form>\n          ) : (\n            <p>Player 1: {player1}</p>\n          )}\n          {!!player1 &&\n            (player2 === null ? (\n              <form onSubmit={e => this.handleNameFormSubmit(e, \"player2\")}>\n                <label>\n                  Player 2:{\" \"}\n                  <input\n                    name=\"player2\"\n                    value={this.state.player2}\n                    onChange={this.handleChange}\n                    placeholder=\"enter your name\"\n                  />\n                </label>\n                <button type=\"submit\">Go</button>\n                {formErrors && <p className=\"formError\">{formErrors.name}</p>}\n              </form>\n            ) : (\n              <p>Player 2: {player2}</p>\n            ))}\n        </div>\n\n        {!!player1 &&\n          !!player2 && (\n            <div className=\"boardSizeFormContainer\">\n              {boardSize === null ? (\n                <form onSubmit={e => this.handleBoardSizeFormSubmit(e)}>\n                  <label>\n                    <span>Board Size (enter a number between 3 - 100)</span>\n                    <input\n                      type=\"number\"\n                      name=\"boardSize\"\n                      value={this.state.boardSize}\n                      onChange={this.handleChange}\n                    />\n                  </label>\n                  <button type=\"submit\">Go</button>\n                  {formErrors && (\n                    <p className=\"formError\">{formErrors.boardSize}</p>\n                  )}\n                </form>\n              ) : (\n                <p>\n                  Board Size: {boardSize} x {boardSize}\n                </p>\n              )}\n            </div>\n          )}\n        <br />\n        {!!player1 &&\n          !!player2 &&\n          !!boardSize && (\n            <div className=\"playButton\">\n              <Link to={\"/board/\"}>\n                <button>Let's play!</button>\n              </Link>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default UserInput;\n","import React from \"react\";\n\nconst Square = props => {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n};\n\nexport default Square;\n","var winCount = 3;\n\nfunction checkRows(playerChosen, grid, gridLength) {\n  for (let row = 0; row < gridLength; row++) {\n    let count = 0;\n    for (let col = 0; col < gridLength; col++) {\n      if (grid[row][col] === playerChosen) {\n        count++;\n      } else {\n        count = 0;\n      }\n      if (count === winCount) {\n        console.log(\"win on row\");\n        return true;\n      }\n    }\n  }\n}\n\nfunction checkCols(playerChosen, grid, gridLength) {\n  for (let col = 0; col < gridLength; col++) {\n    let count = 0;\n    for (let row = 0; row < gridLength; row++) {\n      if (grid[row][col] === playerChosen) {\n        count++;\n      } else {\n        count = 0;\n      }\n      if (count === winCount) {\n        console.log(\"win on col\");\n        return true;\n      }\n    }\n  }\n}\n\nfunction checkDiagLR(playerChosen, grid, gridLength) {\n  // Diagonal line running from top left corner to bottom right corner\n\n  let count = 0;\n  let maxLength = gridLength - winCount + 1;\n\n  // Looking at left portion of diagonal line (including middle strip)\n  for (let rowStart = 0; rowStart < maxLength; rowStart++) {\n    for (\n      let row = rowStart, col = 0;\n      row < gridLength && col < gridLength;\n      row++, col++\n    ) {\n      if (grid[row][col] === playerChosen) {\n        count++;\n      } else {\n        count = 0;\n      }\n      if (count === winCount) {\n        console.log(\"Win left portion of diagonal top left to bottom right\");\n        return true;\n      }\n    }\n  }\n\n  // Looking at right portion of diagonal line (excluding middle strip)\n  for (var colStart = 1; colStart < maxLength; colStart++) {\n    for (\n      var col = colStart, row = 0;\n      col < gridLength && row < gridLength;\n      col++, row++\n    ) {\n      if (grid[row][col] === playerChosen) {\n        count++;\n      } else {\n        count = 0;\n      }\n      if (count === winCount) {\n        console.log(\"Win right portion of diagonal top left to bottom right\");\n        return true;\n      }\n    }\n  }\n}\n\nfunction checkDiagRL(playerChosen, grid, gridLength) {\n  // Diagonal line running from top right corner to bottom left corner\n\n  var count = 0;\n  var maxLength = gridLength - winCount + 1;\n\n  // Looking at right portion of diagonal line (including middle strip)\n  for (let rowStart = 0; rowStart < maxLength; rowStart++) {\n    for (\n      let row = rowStart, col = gridLength - 1;\n      row < gridLength && col >= 0;\n      row++, col--\n    ) {\n      if (grid[row][col] === playerChosen) {\n        count++;\n      } else {\n        count = 0;\n      }\n      if (count === winCount) {\n        console.log(\"Win right portion of diagonal top right to bottom left\");\n        return true;\n      }\n    }\n  }\n\n  // Looking at left portion of diagonal line (excluding middle strip)\n  for (let colStart = gridLength - 2; colStart > winCount - 2; colStart--) {\n    for (\n      var col = colStart, row = 0;\n      col >= 0 && row <= gridLength - 2;\n      col-- && row++\n    ) {\n      if (grid[row][col] === playerChosen) {\n        count++;\n      } else {\n        count = 0;\n      }\n      if (count === winCount) {\n        console.log(\"Win left portion of diagonal top right to bottom left\");\n        return true;\n      }\n    }\n  }\n}\n\nexport function findWinner(playerChosen, grid, gridLength) {\n  if (checkRows(playerChosen, grid, gridLength)) {\n    return localStorage.getItem(playerChosen);\n  }\n  if (checkCols(playerChosen, grid, gridLength)) {\n    return localStorage.getItem(playerChosen);\n  }\n  if (checkDiagLR(playerChosen, grid, gridLength)) {\n    return localStorage.getItem(playerChosen);\n  }\n  if (checkDiagRL(playerChosen, grid, gridLength)) {\n    return localStorage.getItem(playerChosen);\n  }\n  // Otherwise do nothing\n  return null;\n}\n\nexport function areAllSquaresClicked(grid, gridLength) {\n  // Declare variable to store number of clicked squares.\n  let count = 0;\n\n  // Iterate over all squares\n  for (let row = 0; row < gridLength; row++) {\n    for (let col = 0; col < gridLength; col++) {\n      if (grid[row][col] !== null) {\n        count++;\n      }\n    }\n  }\n\n  // Check if all squares are clicked (filled)\n  if (count === gridLength * gridLength) {\n    return true;\n  } else {\n    return false;\n  }\n}\n","import React from \"react\";\n\nimport Square from \"./square.js\";\nimport * as utils from \"../utils/functions\";\n\nimport \"../styles/board.css\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    let gridLength = localStorage.getItem(\"boardSize\") || 3;\n    let defaultValues = this.fillBoardDefaultValues(gridLength);\n\n    this.state = { ...defaultValues };\n  }\n\n  fillBoardDefaultValues(gridLength) {\n    return {\n      xIsNext: true,\n      gridLength: gridLength,\n      grid: Array(parseInt(gridLength))\n        .fill(null)\n        .map(() => Array(parseInt(gridLength)).fill(null)),\n      gameOverWithWinner: false,\n      gameOverWithDraw: false,\n      winner: \"\",\n      showPlayAgainButton: false\n    };\n  }\n\n  handleSquareClick(rowIndex, colIndex) {\n    // get current state of boxes\n    const grid = this.state.grid.slice();\n\n    // Mark the square either as 'x' or 'o'\n    const {\n      xIsNext,\n      gameOverWithWinner,\n      gameOverWithDraw,\n      gridLength\n    } = this.state;\n\n    if (\n      gameOverWithWinner === false &&\n      gameOverWithDraw === false &&\n      grid[rowIndex][colIndex] === null\n    ) {\n      grid[rowIndex][colIndex] = xIsNext ? \"x\" : \"o\";\n      this.setState({\n        grid: grid,\n        xIsNext: !xIsNext\n      });\n    }\n\n    const winner = utils.findWinner(grid[rowIndex][colIndex], grid, gridLength);\n    if (winner) {\n      this.setState({\n        gameOverWithWinner: true,\n        winner: winner,\n        showPlayAgainButton: true\n      });\n    }\n\n    if (utils.areAllSquaresClicked(grid, gridLength) === true) {\n      this.setState({ gameOverWithDraw: true, showPlayAgainButton: true });\n    }\n  }\n\n  handlePlayAgainButton() {\n    let gridLength = localStorage.getItem(\"boardSize\") || 3;\n    let defaultValues = this.fillBoardDefaultValues(gridLength);\n\n    this.setState({ ...defaultValues });\n  }\n\n  render() {\n    // console.table(this.state.grid);\n    const style = {\n      width: \"250px\",\n      height: \"250px\",\n      display: \"grid\",\n      gridTemplate: `repeat(${this.state.gridLength}, 1fr)/repeat(${\n        this.state.gridLength\n      }, 1fr)`\n    };\n\n    const {\n      grid,\n      xIsNext,\n      gameOverWithDraw,\n      gameOverWithWinner,\n      winner,\n      showPlayAgainButton\n    } = this.state;\n\n    const x = localStorage.getItem(\"x\");\n    const o = localStorage.getItem(\"o\");\n\n    const displayNextPlayer =\n      gameOverWithDraw === false && gameOverWithWinner === false;\n\n    return (\n      <div className=\"boardContainer\">\n        {displayNextPlayer &&\n          (xIsNext ? <p>{`${x}'s turn`}</p> : <p>{`${o}'s turn`}</p>)}\n\n        {!!gameOverWithWinner && <p>{winner} wins!</p>}\n        {!!gameOverWithDraw && <p>It's a tie!</p>}\n        <div className=\"board\" style={style}>\n          {grid.map((rowItem, rowIndex) =>\n            grid.map((colItem, colIndex) => (\n              <Square\n                key={`${rowIndex},${colIndex}`}\n                value={this.state.grid[rowIndex][colIndex]}\n                onClick={() => this.handleSquareClick(rowIndex, colIndex)}\n              />\n            ))\n          )}\n        </div>\n        {showPlayAgainButton && (\n          <div>\n            <button onClick={() => this.handlePlayAgainButton()}>\n              Play again\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\n\nimport \"../styles/reset.css\";\n\nclass Reset extends React.Component {\n  handleOnReset = () => {\n    localStorage.clear();\n    window.location = process.env.PUBLIC_URL;\n  };\n\n  render() {\n    return (\n      <div className=\"resetContainer\">\n        <button onClick={this.handleOnReset}>Reset Game</button>\n      </div>\n    );\n  }\n}\n\nexport default Reset;\n","import { BrowserRouter, Route } from \"react-router-dom\";\n\nimport UserInput from \"./components/userInput.js\";\nimport Board from \"./components/board.js\";\nimport Reset from \"./components/reset.js\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Tic Tac Toe</h1>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <div className=\"appContainer\">\n          <div>\n            <Route exact path=\"/\" component={UserInput} />\n            <Route path=\"/board\" component={Board} />\n          </div>\n          <div>\n            <Reset />\n          </div>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}