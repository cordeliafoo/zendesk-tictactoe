{"version":3,"sources":["components/userInput.js","components/square.js","utils/functions.js","components/board.js","components/reset.js","App.js","index.js"],"names":["UserInput","props","handleChange","event","input","target","setState","name","value","state","player1","player2","formErrors","boardSize","e","player","this","localStorage","setItem","preventDefault","getItem","className","onSubmit","handleNameFormSubmit","onChange","placeholder","type","handleBoardSizeFormSubmit","to","React","Component","gridLength","style","height","display","alignItems","justifyContent","Square","onClick","findWinner","playerChosen","grid","row","count","col","console","log","checkRows","checkCols","maxLength","rowStart","colStart","checkDiagLR","winCount","checkDiagRL","Board","defaultValues","fillBoardDefaultValues","xIsNext","Array","parseInt","fill","map","gameOverWithWinner","gameOverWithDraw","winner","showPlayAgainButton","rowIndex","colIndex","slice","utils","gridTemplate","marginBottom","width","x","o","displayNextPlayer","rowItem","colItem","handleSquareClick","handlePlayAgainButton","Reset","handleOnReset","clear","window","location","process","App","basename","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0a07153.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"../styles/userInput.css\";\n\nclass UserInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      player1: \"\",\n      player2: \"\",\n      formErrors: {},\n      boardSize: 3\n    };\n  }\n\n  handleNameFormSubmit(e, player) {\n    const { player1, player2 } = this.state;\n    if (player1 !== \"\" || player2 !== \"\") {\n      if (player === \"player1\") {\n        localStorage.setItem(\"x\", player1);\n      } else {\n        localStorage.setItem(\"o\", player2);\n      }\n    } else {\n      e.preventDefault();\n      this.setState({ formErrors: { name: \"You can't be nameless!\" } });\n    }\n  }\n\n  handleBoardSizeFormSubmit(e) {\n    const { boardSize } = this.state;\n    if (boardSize > 2) {\n      localStorage.setItem(\"boardSize\", boardSize);\n    } else {\n      e.preventDefault();\n      this.setState({\n        formErrors: {\n          ...this.state.formErrors,\n          boardSize: \"Board size needs to be at least 3\"\n        }\n      });\n    }\n  }\n\n  handleChange = event => {\n    const input = event.target;\n    this.setState({ [input.name]: input.value });\n  };\n\n  render() {\n    const { formErrors } = this.state;\n\n    let player1 = localStorage.getItem(\"x\");\n    let player2 = localStorage.getItem(\"o\");\n    let boardSize = localStorage.getItem(\"boardSize\");\n\n    return (\n      <div className=\"formsContainer\">\n        <div className=\"nameFormsContainer\">\n          {player1 === null ? (\n            <form onSubmit={e => this.handleNameFormSubmit(e, \"player1\")}>\n              <label>\n                Player 1:{\" \"}\n                <input\n                  name=\"player1\"\n                  value={this.state.player1}\n                  onChange={this.handleChange}\n                  placeholder=\"enter your name\"\n                />\n              </label>\n              <button type=\"submit\">Go</button>\n              {formErrors && <p className=\"formError\">{formErrors.name}</p>}\n            </form>\n          ) : (\n            <p>Player 1: {player1}</p>\n          )}\n          {!!player1 &&\n            (player2 === null ? (\n              <form onSubmit={e => this.handleNameFormSubmit(e, \"player2\")}>\n                <label>\n                  Player 2:{\" \"}\n                  <input\n                    name=\"player2\"\n                    value={this.state.player2}\n                    onChange={this.handleChange}\n                    placeholder=\"enter your name\"\n                  />\n                </label>\n                <button type=\"submit\">Go</button>\n                {formErrors && <p className=\"formError\">{formErrors.name}</p>}\n              </form>\n            ) : (\n              <p>Player 2: {player2}</p>\n            ))}\n        </div>\n\n        {!!player1 &&\n          !!player2 && (\n            <div className=\"boardSizeFormContainer\">\n              {boardSize === null ? (\n                <form onSubmit={e => this.handleBoardSizeFormSubmit(e)}>\n                  <label>\n                    <span>Board Size (enter a number between 3 - 100)</span>\n                    <input\n                      type=\"number\"\n                      name=\"boardSize\"\n                      value={this.state.boardSize}\n                      onChange={this.handleChange}\n                    />\n                  </label>\n                  <button type=\"submit\">Go</button>\n                  {formErrors && (\n                    <p className=\"formError\">{formErrors.boardSize}</p>\n                  )}\n                </form>\n              ) : (\n                <p>\n                  Board Size: {boardSize} x {boardSize}\n                </p>\n              )}\n            </div>\n          )}\n        <br />\n\n        {!!player1 &&\n          !!player2 &&\n          !!boardSize && (\n            <div className=\"playButton\">\n              <Link to={\"/board/\"}>\n                <button>Let's play!</button>\n              </Link>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default UserInput;\n","import React from \"react\";\n\nconst gridLength = localStorage.getItem(\"boardSize\");\n\nconst style = {\n  height: `calc(${gridLength * 5}vw/${gridLength})`,\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\"\n};\n\nconst Square = props => {\n  return (\n    <button className=\"square\" onClick={props.onClick} style={style}>\n      {props.value}\n    </button>\n  );\n};\n\nexport default Square;\n","var winCount = 3;\n\nfunction checkRows(playerChosen, grid, gridLength) {\n  for (let row = 0; row < gridLength; row++) {\n    let count = 0;\n    for (let col = 0; col < gridLength; col++) {\n      if (grid[row][col] === playerChosen) {\n        count++;\n      } else {\n        count = 0;\n      }\n      if (count === winCount) {\n        console.log(\"win on row\");\n        return true;\n      }\n    }\n  }\n}\n\nfunction checkCols(playerChosen, grid, gridLength) {\n  for (let col = 0; col < gridLength; col++) {\n    let count = 0;\n    for (let row = 0; row < gridLength; row++) {\n      if (grid[row][col] === playerChosen) {\n        count++;\n      } else {\n        count = 0;\n      }\n      if (count === winCount) {\n        console.log(\"win on col\");\n        return true;\n      }\n    }\n  }\n}\n\nfunction checkDiagLR(playerChosen, grid, gridLength) {\n  // Diagonal line running from top left corner to bottom right corner\n\n  let count = 0;\n  let maxLength = gridLength - winCount + 1;\n\n  // Looking at left portion of diagonal line (including middle strip)\n  for (let rowStart = 0; rowStart < maxLength; rowStart++) {\n    for (\n      let row = rowStart, col = 0;\n      row < gridLength && col < gridLength;\n      row++, col++\n    ) {\n      if (grid[row][col] === playerChosen) {\n        count++;\n      } else {\n        count = 0;\n      }\n      if (count === winCount) {\n        console.log(\"Win left portion of diagonal top left to bottom right\");\n        return true;\n      }\n    }\n  }\n\n  // Looking at right portion of diagonal line (excluding middle strip)\n  for (var colStart = 1; colStart < maxLength; colStart++) {\n    for (\n      var col = colStart, row = 0;\n      col < gridLength && row < gridLength;\n      col++, row++\n    ) {\n      if (grid[row][col] === playerChosen) {\n        count++;\n      } else {\n        count = 0;\n      }\n      if (count === winCount) {\n        console.log(\"Win right portion of diagonal top left to bottom right\");\n        return true;\n      }\n    }\n  }\n}\n\nfunction checkDiagRL(playerChosen, grid, gridLength) {\n  // Diagonal line running from top right corner to bottom left corner\n\n  var count = 0;\n  var maxLength = gridLength - winCount + 1;\n\n  // Looking at right portion of diagonal line (including middle strip)\n  for (let rowStart = 0; rowStart < maxLength; rowStart++) {\n    for (\n      let row = rowStart, col = gridLength - 1;\n      row < gridLength && col >= 0;\n      row++, col--\n    ) {\n      if (grid[row][col] === playerChosen) {\n        count++;\n      } else {\n        count = 0;\n      }\n      if (count === winCount) {\n        console.log(\"Win right portion of diagonal top right to bottom left\");\n        return true;\n      }\n    }\n  }\n\n  // Looking at left portion of diagonal line (excluding middle strip)\n  for (let colStart = gridLength - 2; colStart > winCount - 2; colStart--) {\n    for (\n      var col = colStart, row = 0;\n      col >= 0 && row <= gridLength - 2;\n      col-- && row++\n    ) {\n      if (grid[row][col] === playerChosen) {\n        count++;\n      } else {\n        count = 0;\n      }\n      if (count === winCount) {\n        console.log(\"Win left portion of diagonal top right to bottom left\");\n        return true;\n      }\n    }\n  }\n}\n\nexport function findWinner(playerChosen, grid, gridLength) {\n  if (checkRows(playerChosen, grid, gridLength)) {\n    return localStorage.getItem(playerChosen);\n  }\n  if (checkCols(playerChosen, grid, gridLength)) {\n    return localStorage.getItem(playerChosen);\n  }\n  if (checkDiagLR(playerChosen, grid, gridLength)) {\n    return localStorage.getItem(playerChosen);\n  }\n  if (checkDiagRL(playerChosen, grid, gridLength)) {\n    return localStorage.getItem(playerChosen);\n  }\n  // Otherwise do nothing\n  return null;\n}\n\nexport function areAllSquaresClicked(grid, gridLength) {\n  // Declare variable to store number of clicked squares.\n  let count = 0;\n\n  // Iterate over all squares\n  for (let row = 0; row < gridLength; row++) {\n    for (let col = 0; col < gridLength; col++) {\n      if (grid[row][col] !== null) {\n        count++;\n      }\n    }\n  }\n\n  // Check if all squares are clicked (filled)\n  if (count === gridLength * gridLength) {\n    return true;\n  } else {\n    return false;\n  }\n}\n","import React from \"react\";\n\nimport Square from \"./square.js\";\nimport * as utils from \"../utils/functions\";\n\nimport \"../styles/board.css\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    let gridLength = localStorage.getItem(\"boardSize\") || 3;\n    let defaultValues = this.fillBoardDefaultValues(gridLength);\n\n    this.state = { ...defaultValues };\n  }\n\n  fillBoardDefaultValues(gridLength) {\n    return {\n      xIsNext: true,\n      gridLength: gridLength,\n      grid: Array(parseInt(gridLength))\n        .fill(null)\n        .map(() => Array(parseInt(gridLength)).fill(null)),\n      gameOverWithWinner: false,\n      gameOverWithDraw: false,\n      winner: \"\",\n      showPlayAgainButton: false\n    };\n  }\n\n  handleSquareClick(rowIndex, colIndex) {\n    // get current state of boxes\n    const grid = this.state.grid.slice();\n\n    // Mark the square either as 'x' or 'o'\n    const {\n      xIsNext,\n      gameOverWithWinner,\n      gameOverWithDraw,\n      gridLength\n    } = this.state;\n\n    if (\n      gameOverWithWinner === false &&\n      gameOverWithDraw === false &&\n      grid[rowIndex][colIndex] === null\n    ) {\n      grid[rowIndex][colIndex] = xIsNext ? \"x\" : \"o\";\n      this.setState({\n        grid: grid,\n        xIsNext: !xIsNext\n      });\n    }\n\n    const winner = utils.findWinner(grid[rowIndex][colIndex], grid, gridLength);\n    if (winner) {\n      this.setState({\n        gameOverWithWinner: true,\n        winner: winner,\n        showPlayAgainButton: true\n      });\n    }\n\n    if (utils.areAllSquaresClicked(grid, gridLength) === true) {\n      this.setState({ gameOverWithDraw: true, showPlayAgainButton: true });\n    }\n  }\n\n  handlePlayAgainButton() {\n    let gridLength = localStorage.getItem(\"boardSize\") || 3;\n    let defaultValues = this.fillBoardDefaultValues(gridLength);\n\n    this.setState({ ...defaultValues });\n  }\n\n  render() {\n    // console.table(this.state.grid);\n    const style = {\n      display: \"grid\",\n      gridTemplate: `repeat(${this.state.gridLength}, 1fr)/repeat(${\n        this.state.gridLength\n      }, 1fr)`,\n      marginBottom: \"2em\",\n      width: `${this.state.gridLength * 5}vw`\n    };\n\n    const {\n      grid,\n      xIsNext,\n      gameOverWithDraw,\n      gameOverWithWinner,\n      winner,\n      showPlayAgainButton\n    } = this.state;\n\n    const x = localStorage.getItem(\"x\");\n    const o = localStorage.getItem(\"o\");\n\n    const displayNextPlayer =\n      gameOverWithDraw === false && gameOverWithWinner === false;\n\n    return (\n      <div className=\"boardContainer\">\n        {displayNextPlayer &&\n          (xIsNext ? <p>{`${x}'s turn`}</p> : <p>{`${o}'s turn`}</p>)}\n\n        {!!gameOverWithWinner && <p>{winner} wins!</p>}\n        {!!gameOverWithDraw &&\n          gameOverWithWinner === false && <p>It's a tie!</p>}\n        <div className=\"board\" style={style}>\n          {grid.map((rowItem, rowIndex) =>\n            grid.map((colItem, colIndex) => (\n              <Square\n                key={`${rowIndex},${colIndex}`}\n                value={this.state.grid[rowIndex][colIndex]}\n                onClick={() => this.handleSquareClick(rowIndex, colIndex)}\n              />\n            ))\n          )}\n        </div>\n        {showPlayAgainButton && (\n          <div>\n            <button onClick={() => this.handlePlayAgainButton()}>\n              Play again\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\n\nimport \"../styles/reset.css\";\n\nclass Reset extends React.Component {\n  handleOnReset = () => {\n    localStorage.clear();\n    window.location = process.env.PUBLIC_URL;\n  };\n\n  render() {\n    return (\n      <div className=\"resetContainer\">\n        <button onClick={this.handleOnReset}>Reset Game</button>\n      </div>\n    );\n  }\n}\n\nexport default Reset;\n","import { BrowserRouter, Route } from \"react-router-dom\";\n\nimport UserInput from \"./components/userInput.js\";\nimport Board from \"./components/board.js\";\nimport Reset from \"./components/reset.js\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"headingContainer\">\n        <div>\n          <h1>Tic Tac Toe</h1>\n        </div>\n\n        <Reset />\n      </div>\n\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <div className=\"appContainer\">\n          <div>\n            <Route exact path=\"/\" component={UserInput} />\n            <Route path=\"/board\" component={Board} />\n          </div>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}